// Generated by view binder compiler. Do not edit!
package com.example.myapplication.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.myapplication.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final LinearLayout bottomBar;

  @NonNull
  public final ImageView chatGroup;

  @NonNull
  public final ImageView chatOneOne;

  @NonNull
  public final ImageView logoutimg;

  @NonNull
  public final RelativeLayout main;

  @NonNull
  public final RecyclerView mainUserRecyclerView;

  @NonNull
  public final ImageView settingProfile;

  @NonNull
  public final LinearLayout toolBar;

  private ActivityMainBinding(@NonNull RelativeLayout rootView, @NonNull LinearLayout bottomBar,
      @NonNull ImageView chatGroup, @NonNull ImageView chatOneOne, @NonNull ImageView logoutimg,
      @NonNull RelativeLayout main, @NonNull RecyclerView mainUserRecyclerView,
      @NonNull ImageView settingProfile, @NonNull LinearLayout toolBar) {
    this.rootView = rootView;
    this.bottomBar = bottomBar;
    this.chatGroup = chatGroup;
    this.chatOneOne = chatOneOne;
    this.logoutimg = logoutimg;
    this.main = main;
    this.mainUserRecyclerView = mainUserRecyclerView;
    this.settingProfile = settingProfile;
    this.toolBar = toolBar;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bottomBar;
      LinearLayout bottomBar = ViewBindings.findChildViewById(rootView, id);
      if (bottomBar == null) {
        break missingId;
      }

      id = R.id.chatGroup;
      ImageView chatGroup = ViewBindings.findChildViewById(rootView, id);
      if (chatGroup == null) {
        break missingId;
      }

      id = R.id.chatOneOne;
      ImageView chatOneOne = ViewBindings.findChildViewById(rootView, id);
      if (chatOneOne == null) {
        break missingId;
      }

      id = R.id.logoutimg;
      ImageView logoutimg = ViewBindings.findChildViewById(rootView, id);
      if (logoutimg == null) {
        break missingId;
      }

      RelativeLayout main = (RelativeLayout) rootView;

      id = R.id.mainUserRecyclerView;
      RecyclerView mainUserRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (mainUserRecyclerView == null) {
        break missingId;
      }

      id = R.id.setting_profile;
      ImageView settingProfile = ViewBindings.findChildViewById(rootView, id);
      if (settingProfile == null) {
        break missingId;
      }

      id = R.id.toolBar;
      LinearLayout toolBar = ViewBindings.findChildViewById(rootView, id);
      if (toolBar == null) {
        break missingId;
      }

      return new ActivityMainBinding((RelativeLayout) rootView, bottomBar, chatGroup, chatOneOne,
          logoutimg, main, mainUserRecyclerView, settingProfile, toolBar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
